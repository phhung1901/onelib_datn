<?php

namespace App\DocumentProcess\Utilities;

use App\Libs\StringUtils;
use App\Libs\StringValidator;

class HeadingHelper
{
    private static array $text_ignored = [
        //Anh //India //Philippines
        'table', 'T ABLE', 'tab.', 'figure', 'fig', 'fig.', 'diagram',
        'graphic', 'graph', 'image', 'illustration', 'schema', 'plano', 'exhibit',
        'photo', 'box', 'listing', 'activity', 'proposition', 'zona', 'lemme',
        //Indo
        'tabel', 'angka', 'grafik', 'gambar', 'ilustrasi',
        //T√¢y Ba Nha
        'tabla', 'figura', 'imagen', 'cuadro', 'gr√°fico', 'ilustraci√≥n', 'fotograf√≠a',
        //B·ªì ƒê√†o Nha
        'tabela', 'ilustra√ß√£o', 'quadro', 'tarefa',
        //ƒê·ª©c
        'tafel', 'tisch', 'tabelle', 'figur', 'diagramm', 'grafik', 'abbildung', 'abb.', 'karte', 'bild', 'gleichung',
        //Ph√°p
        'tableau', 'diagramme', 'graphique', 'sch√©ma', 'photographie',
        //Th·ªï Nhƒ© K·ª≥ - Turkish
        'tablo' , 'fig√ºr', 'ƒ°ekil', '≈üekil', '√ßizelge', 'resim', '√∂rnek',
        //Balan - Polish
        'tablica', 'wykres', 'rysunek', 'fot.', 'schemat', 'zagadka',
        //Th·ªßy ƒêi·ªÉn - Swedish
        'tabl√•', 'tabell', 'fr√•ga', 'faktaruta',
        //Italy
        'tabella', 'diagramma', 'illustrazione', 'immagine', 'fotografia',
        //H√† Lan
        'figuur', 'grafisch', 'illustratie', 'kaart', 'grafiek', 'tekstbox', 'afbeelding', 'stap',
        // Hungary
        '.*\W\s(t√°bl√°zat|√°bra|t√©rk√©p|grafikon|k√©p)\W',
        //Nga
        't–∞–±–ª–∏—Ü–∞',
        // Slovenia
        'tabela', 'grafikon', 'zemljevid', 'graf', 'slika',
        // Ph·∫ßn Lan
        'taulukko', 'kaavio', 'kartta', 'kaavio', 'kuva',
        // CH S√©c
        'tabulka', 'figura', 'mapa', 'graf', 'obr√°zek',
        // Na uy
        'tabell', 'figur', 'kart', 'graf', 'bilde',
        // ƒêan m·∫°ch
        'tabel', 'figur', 'kort', 'graf', 'billede',
        // Korean
        'Í∑∏Î¶º', 'Ìëú',
        //Taiwan
        'Ë°®', 'Âúñ',
        //japan
        'Âõ≥', 'Âõ≥Ë°®',
        //Malay
        'jadual', 'carta pai', 'rajah', 'graf', 'gambar', 'foto', 'FYP FTKW', 'lampiran',
        //Ph
        'talahanayan', 'graph', 'pigura', 'ilustrasyon', 'larawan',
        //Vietnam
        'b·∫£ng', 'h√¨nh', 'h·ª°nh', 'v√≠ d·ª•', 'ƒë·ªì th·ªã', 's∆° ƒë·ªì', 'c√¢u', 'ƒë·ªÅ', 'b∆∞·ªõc', 'c√°ch', 'h∆∞·ªõng',
        //Other
        'eùëû', 'year', 'month', 'week', 'for', 'kompetensi', 'co 2',
        'example', 'contoh', 'ejemplo', 'exemplo', 'experiment', 'voorbeeld',
        'method',
        'œÄ', 'Œº', 'Œ∏', 'Œµ', 'Œ¥', 'Œ≤', 'Œ£', '‚à¥', '‚àµ', '‚ô£',
    ];

    private static array $heading_ignored = [
        'reference', 'references', 'referencia', 'Referenz', 'referensi', 'r√©f√©rence', 'refer√™ncia', 'literat√∫ra', 'referentie', 'referencja', 'referens', 'referans', 'ÂèÉËÄÉÊñáÁçª',
        'RUJUKAN', 'sanggunian',
        'table of content', 'tabla de contenidos', 'tabela de conte√∫do', 'table des mati√®res', 'ISI KANDUNGAN',
        'list of figures', 'lista de figuras', 'liste des figures', 'daftar gambar', 'SENARAI JADUAL',
        't√†i li·ªáu tham kh·∫£o', 'DANH M·ª§C H√åNH', 'M·ª§C L·ª§C', //Viet Nam
    ];

    const HEADING_H2_UPPER_TYPE = 2;
    const HEADING_H2_TYPE = 3;

    private static array $heading_types = [
        [       //V.V.V.V
            'level' => 12,
            'regex' => '/^([IVX]){1,4}(\.([IVX]){1,4}){3}\.?\s*/',
        ],
        [       //V.V.V
            'level' => 11,
            'regex' => '/^([IVX]){1,4}(\.([IVX]){1,4}){2}\.?\s*/',
        ],
        [       //V.V.
            'level' => 10,
            'regex' => '/^([IVX]){1,4}(\.([IVX]){1,4}){1}\.?\s*/',
        ],
        [       //V.1.1.1
            'level' => 15,
            'regex' => '/^([IVX]){1,4}\.\s*([\p{N}]){1,2}(\.([\p{N}]){1,2}){2}(\.|\/)?\s*(?=[\p{L}])/u',
        ],
        [       //V.1.1.
            'level' => 14,
            'regex' => '/^([IVX]){1,4}\.\s*([\p{N}]){1,2}(\.([\p{N}]){1,2}){1}(\.|\/)?\s*(?=[\p{L}])/u',
        ],
        [       //V.1.
            'level' => 13,
            'regex' => '/^([IVX]){1,4}\.\s*([\p{N}]){1,2}[.:\/\s\-)„ÄÅ]{1}\s*(?=[\p{L}])/u',
        ],
        [       //BAB V.
            'level' => 2,
            'regex' => '/^([^\s\W\p{N}]{2,})\s+([IVX]){1,4}([Ôºé.:\s\-)„ÄÅ]|$)\s*/u',
        ],
        [       //Á¨¨‰∏ÄÁ´†
            'level' => 2,
            'regex' => '/^Á¨¨\s?([‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πùÂçÅ\p{N}])\s?Á´†(\s*„ÄÅ?|$)/ui',
        ],
        [       //V.
            'level' => 9,
            'regex' => '/^([IVX]){1,4}[Ôºé.:\-)„ÄÅ]+\s*/u',
        ],
        [       //1.1.1.1
            'level' => 19,
            'regex' => '/^([\p{N}]){1,2}(\.([\p{N}]){1,2}){3}(\.|\/|:)?\s*(?=[\p{L}])/u',
        ],
        [       //1.1.1
            'level' => 18,
            'regex' => '/^([\p{N}]){1,2}(\.([\p{N}]){1,2}){2}(\.|\/|:)?\s*(?=[\p{L}])/u',
        ],
        [       //1.1.
            'level' => 17,
            'regex' => '/^([\p{N}]){1,2}(\.([\p{N}]){1,2}){1}(\.|\/|:)?\s*(?=[\p{L}])/u',
        ],
        [       //Bab 1.
            'level' => 3,
            'regex' => '/^([^\s\W\p{N}]{2,})\s+([\p{N}]){1,2}([Ôºé.:\s\-)„ÄÅ]|$)\s*/ui',
        ],
        [       //Á¨¨‰∏ÄÁØÄ
            'level' => 3,
            'regex' => '/^Á¨¨\s?([‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πùÂçÅ\p{N}])\s?(ÁØÄ|ÈÉ®)(\s*„ÄÅ?|$)/ui',
        ],
        [       //1.
            'level' => 16,
            'regex' => '/^([\p{N}‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πùÂçÅ]){1,2}[Ôºé.:\/\s\-)„ÄÅ]{1}\s+(?=[\p{L}])/u',
        ],
        [       //A.1.1.1.1
            'level' => 8,
            'regex' => '/^([A-Z]\.)\s*([\p{N}]){1,2}(\.([\p{N}]){1,2}){3}(\.|\/)?\s*(?=[\p{L}])/u',
        ],
        [       //A.1.1.1
            'level' => 7,
            'regex' => '/^([A-Z]\.)\s*([\p{N}]){1,2}(\.([\p{N}]){1,2}){2}(\.|\/)?\s*(?=[\p{L}])/u',
        ],
        [       //A.1.1.
            'level' => 6,
            'regex' => '/^([A-Z]\.)\s*([\p{N}]){1,2}(\.([\p{N}]){1,2}){1}(\.|\/)?\s*(?=[\p{L}])/u',
        ],
        [       //A.1.
            'level' => 5,
            'regex' => '/^([A-Z]\.)\s*([\p{N}]){1,2}[.:\/\s\-)„ÄÅ]{1}\s*(?=[\p{L}])/u',
        ],
        [       //A.
            'level' => 4,
            'regex' => '/^[A-Z][Ôºé\.:,)\-„ÄÅ]+\s*(?=[\p{L}])/u',
        ],
    ];

    /**
     * Tr·∫£ v·ªÅ danh s√°ch c√°c lo·∫°i heading c·ªßa line hi·ªán t·∫°i theo c√°c regex cho tr∆∞·ªõc
     *
     * @param string $heading
     * @return array
     */
    public static function findHeadingType(string $heading)
    {
        $heading = trim($heading);
        $heading = preg_replace("/\s+/u", " ", $heading);

        /** Fix Bug */
        $heading = preg_replace("/^S ECTION/", "SECTION", $heading);
        $heading = preg_replace("/^T ABLE/", "TABLE", $heading);
        /**  */

        foreach (self::$heading_types as ['level' => $level, 'regex' => $regex]) {
            if (preg_match($regex, $heading, $matches)) {
                if ($level == 2 || $level == 3) {
                    if (self::hasIgnoreText($heading))
                        return null;
                    if (StringUtils::isLatin($heading))
                        preg_match('/^([^\s\W\p{N}]+)\s+[^\p{Z}]+([.:\s\-)]|$)\s*/ui', $heading, $matches);
                }

                $prefix = trim($matches[0]);
                $heading = HeadingHelper::standardizedHeading($heading, $prefix);
                return compact('level', 'prefix', 'heading');
            }
        }

        return null;
    }

    public static function hasIgnoreText(string $text): bool
    {
        foreach (self::$text_ignored as $ignored) {
            if (preg_match("/^$ignored/ui", trim($text))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Remove prefix, chu·∫©n h√≥a heading
     */
    public static function standardizedHeading(string $line_text, ?string $prefix): string
    {
        $content = StringUtils::trim((str_replace($prefix, '', $line_text)));
        $content = preg_replace("/(\.\s*|\-\s*|\s\s|‚Ä¶\s*|¬∑\s*)\g{1}+\W*[0-9ivx]*\W*$/ui", '', $content);
        $content = preg_replace('/^[^\p{L}\p{N}]+/ui', '', $content);
        $content = StringUtils::trim($content);
        return rtrim($content, ".:");
    }

    public static function validateHeading(?string $string): bool
    {
        if (!$string) return false;

        $title_validate = new StringValidator($string, ['min_words' => 1, 'min_chars' => 4]);
        return $title_validate->isValid();
    }

    /** @todo: H√†m n√†y c·∫ßn suwar */
    public static function calculateHeadingQuality(?string $heading): int
    {
        if (empty($heading)) return 0;

        if (preg_match("/^(\p{Ll})/u", $heading)) {
            return 50;
        }

        foreach (self::$heading_ignored as $ignore_heading) {
            if (preg_match("/^$ignore_heading/ui", preg_quote($heading))) {
                return 50;
            }
        }

        //heading c√≥ d·∫°ng "FC FC FC 3.79 FB FB FB ...."
        //4 t·ª´ c·∫°nh nhau c√≥ √≠t h∆°n 3 k√Ω t·ª±
        $x = 0;
        foreach (explode(' ', $heading) as $w) {
            preg_match_all("/[\p{L}\p{Han}\p{Hangul}\p{Hiragana}\p{Katakana}]/ui", $w, $matches);
            $x = (count($matches[0]) < 3) ? $x+1 : 0;
            if ($x == 4) return 0;
        }

        return 100;
    }
}